%{
/*
   FILE: sample4.brg
  
   Copyright (c) 1997 Princeton University

   All rights reserved.

   This software is to be used for non-commercial purposes only,
   unless authorized permission to do otherwise is obtained.  
   For more information, contact spam@ee.princeton.edu
*/

#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unordered_set>
enum {
  LOADI=1, STOREI=2, CNSTT=3, ADDI1=4,
  ADDI2=5, STOREI2=10, GLOBI=51,
  COPYI=6, ADDRLP=7, ASGNI=8, MEM=9
};

typedef struct tree {
  int op;
  int inst_num;
  struct tree *kids[2];
  int val;
  int start;
  int end;
  int num_kids;
  Instruction *inst;      
  struct { struct burm_state *state; } x;
} *NODEPTR, *Tree;

#define GET_KIDS(p)	((p)->kids)
#define PANIC printf
#define STATE_LABEL(p) ((p)->x.state)
#define SET_STATE(p,s) (p)->x.state=(s)
#define DEFAULT_COST	break
#define NO_ACTION(x)

typedef struct COST {
    int cost;
} COST;
#define COST_LESS(a,b) ((a).cost < (b).cost)

static COST COST_INFINITY = { 32767 };
static COST COST_ZERO     = { 0 };

/*static char* burm_string = "FOO";*/
static int _ern = 0;

static int shouldTrace = 0;
static int shouldCover = 0;

int OP_LABEL(NODEPTR p) {
	switch (p->op) {
	//case CNSTT:  if (p->val == 0) return 661 /* I0I */;
	default:     return p->op;
	}
}

static void burm_trace(NODEPTR, int, COST);

std::vector<Tree> rootKeys;
std::unordered_set<std::string> pools;			// active pool of registers
std::map<Instruction*, Tree> roots;
std::map<Instruction*, Tree> nodes;
std::vector<Instruction*> gvec;
std::map<Instruction*, int> SymTable;	// Instruction and offset in stack
std::map<Instruction*, int> InstIdx;	// Instruction and its number
std::map<Instruction*, std::string> RegTable;  // Instruction and register
std::map<std::string, Instruction*> InsTable;  // Register and instruction

int offCount = 0;	// Global value for offset count
static int getNexOff()
{
  offCount += 8;
  return offCount - 8;
}

// Expire the old register that's not useful
static void expireOldInterval(Instruction *inst) {
  int T = InstIdx[inst];
  //errs() << "trying " << *inst << " at interval " << T << "\n";
  for (auto it = InsTable.begin(); it != InsTable.end(); ++it)
  {
    NODEPTR cur = nodes[it->second];
    if (cur->end <= T)
    {
      //errs() << "expire " << it->first << " at time interval " << T << "\n";
      pools.insert(it->first);
      InsTable.erase(it->first);
      RegTable.erase(it->second);
    }
  }
}

static std::string spillAtInterval(Instruction *inst)
{
  int maxEnd = -1;
  Instruction *maxIns = NULL;

  for (auto it = InsTable.begin(); it != InsTable.end(); ++it)
  {
    NODEPTR cur = nodes[it->second];
    if (cur->end > maxEnd)
    {
      maxEnd = cur->end;
      maxIns = cur->inst;
    }
  }

  std::string reg = RegTable[maxIns];
  int offset = getNexOff();
  RegTable[maxIns] = std::to_string(offset) + "(%rbp)";
  InsTable.erase(reg);
  std::cout << "movq(spill) " << RegTable[maxIns] << ", " << reg << "\n";
  return reg;
}

// Allocate register with linear scan algorithm
static std::string getNexReg(Instruction *inst) {
  // expire old register first
  expireOldInterval(inst);

  // Get a new one with linear scan algorithm
  std::string reg;
  if (!pools.empty())
  {
    auto it = pools.begin();
    reg = *it;
    pools.erase(reg);
  }
  else
  {
    // spill
    reg = spillAtInterval(inst);
  }

  return reg;
}

std::string binop(Instruction *inst)
{
  switch (inst->getOpcode()) {
    case Instruction::Add : return "addq ";
    case Instruction::Sub : return "subq ";
    case Instruction::Mul : return "mulq ";
    case Instruction::UDiv : 
    case Instruction::SDiv : return "divq ";
    case Instruction::And : return "andq ";
    case Instruction::Or :  return "orq ";
    case Instruction::Xor :  return "xorq ";
    default: return "unknown ";
  }
}

%}
%term BURP=0 LOADI=1 STOREI=2 CNSTT=3
%term ADDI1=4 ADDI2=5 COPYI=6 ADDRLP=7 
%term ASGNI=8 MEM=9 STOREI2=10 RETI=99
%term GLOBI=51
%declare<std::string> stmt<int indent>;
%declare<std::string> reg<int indent>;
%declare<std::string> disp<int indent>;
%declare<std::string> rc<int indent>;
%declare<std::string> con<int indent>;
%%
stmt:	BURP(_,_,_)
	{ return 1; }
	= {
		$immed[2,stmt](10);
                return "";
	};

stmt:	STOREI(disp,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		std::cout << "movq(store) " + $action[2](indent+1) + ", " + $action[3](indent+1) + "\n";
		return "";
	};

stmt:	STOREI(reg,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		std::cout << "movq (" + $action[2](indent+1) + "), " + $action[3](indent+1) + "\n";
		return "";
	};

stmt:	STOREI2(disp,disp)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = getNexReg(_s->node->inst);
		RegTable[_s->node->inst] = reg1;
                InsTable[reg1] = _s->node->inst;
                std::cout << "leaq " << reg1 << ", " << $action[3](indent+1) << "\n";
		std::cout << "movq(store2) " + $action[2](indent+1) + ", " + reg1 + "\n";
		return "";
	};

stmt:	reg
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		return $action[1](indent+1);
	};

reg:	COPYI
	{ $cost[0].cost=1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = getNexReg(_s->node->inst);
                if (reg1.compare(RegTable[_s->node->inst]) != 0)
                  std::cout << "movq(copy) " + reg1 + ", " + RegTable[_s->node->inst] + "\n";
                if (RegTable[_s->node->inst][0] != '%')
                {
                  errs() << "copy updating " << *(_s->node->inst) << " to " << reg1 << "\n";
                  RegTable[_s->node->inst] = reg1;
                  InsTable[reg1] = _s->node->inst;
                }
                return reg1;
	};

reg:	ADDI1(reg,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = $action[2](indent+1);
                NODEPTR cur = _s->node;
                std::cout << binop(cur->inst) + reg1 +  ", " + $action[3](indent+1) + "\n";
                RegTable[cur->inst] = reg1;
                InsTable[reg1] = cur->inst;
                return reg1;
	};

reg:	LOADI
	{ $cost[0].cost=1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = getNexReg(_s->node->inst);
		RegTable[_s->node->inst] = reg1;
                InsTable[reg1] = _s->node->inst;
                NODEPTR cur = _s->node;
                if (isa<GlobalValue>(cur->inst->getOperand(0)))
                {
		  Instruction *inst = (Instruction *) (cur->inst->getOperand(0));
		  std::string str;
		  llvm::raw_string_ostream rso(str);
		  inst->print(rso);
		  rso.flush();
		  std::cout << "movq(load) " + reg1 + ", " + str.substr(1, 1) + "(%rip)\n";
                }
		else
		{
                  Instruction *inst = dyn_cast<Instruction>(cur->inst->getOperand(0));
                  int offset = SymTable[inst];
                  std::cout << "movq(load) " + reg1 + ", " + std::to_string(offset) + "(%rbp)\n";
		}
                return reg1;
	};

disp:	ADDRLP
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                NODEPTR cur = _s->node;
                Instruction *inst = dyn_cast<Instruction>(cur->inst->getOperand(cur->inst_num));
                Type *tp = cur->inst->getOperand(cur->inst_num)->getType();
                std::string tmpStr;
                llvm::raw_string_ostream rso(tmpStr);
                tp->print(rso);
                rso.flush();
                int level = 0;
                for (char c : tmpStr)
                  if (c == '*')
                    level++;
                int offset = 0;
                offset = SymTable[inst];
                std::string ret =  std::to_string(offset) + "(%rbp)";
                return ret;
	};

disp:	ADDI1(reg,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = $action[2](indent+1);
                std::cout << "addq " + reg1 +  ", " + $action[3](indent+1) + "\n";
                NODEPTR cur = _s->node;
                RegTable[cur->inst] = reg1;
                return reg1;
	};

disp:	GLOBI
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		std::string str;
		llvm::raw_string_ostream rso(str);
		_s->node->inst->print(rso);
		rso.flush();
		std::string rip = "(%rip)";
		return str.substr(1,1) + rip;
	};

rc:	con
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		return $action[1](indent+1);
	};

rc:	reg
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		return $action[1](indent+1);
	};

con:	CNSTT
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                NODEPTR cur = _s->node;
                Constant* cnst = dyn_cast<Constant>(cur->inst->getOperand(cur->inst_num));
                int val = cnst->getUniqueInteger().getSExtValue();
                return "$" + std::to_string(val);
	};


%%

/* burm_trace - print trace message for matching p */
static void burm_trace(NODEPTR p, int eruleno, COST cost) {
	if (shouldTrace)
		std::cerr << "0x" << p << " matched " << burm_string[eruleno] << " = " << eruleno << " with cost " << cost.cost << "\n";
}

static void gen(NODEPTR p) {
	if (burm_label(p) == 0)
		std::cerr << "no cover\n";
	else {
		stmt_action(p->x.state,0);
		if (shouldCover != 0)
			dumpCover(p, 1, 0);
	}
}

static void updateLifeInterval(NODEPTR p) {
  p->start = InstIdx[p->inst];
  p->end = 0;

  for (int i = 0; i < p->inst->getNumOperands(); ++i)
  {
    if (isa<Constant>(p->inst->getOperand(0)))
      continue;

    Instruction* opinst = dyn_cast<Instruction>(p->inst->getOperand(i));
    if (nodes.find(opinst) != nodes.end())
      nodes[opinst]->end = p->start;
    if (roots.find(opinst) != roots.end())
      roots[opinst]->end = p->start;
  }
}

// Generate the layout for all global data
static void GlobalLayOut()
{
  for (auto inst : gvec)
  {
    std::cout << "\n";
    std::string str;
    llvm::raw_string_ostream rso(str);
    inst->print(rso);
    rso.flush();
    std::string var = str.substr(1, 1);
    Constant* cnst = dyn_cast<Constant>(inst->getOperand(0));
    int val = cnst->getUniqueInteger().getSExtValue();
    std::cout << "\t.type\t" << var << ",@object\n";
    std::cout << "\t.data\n";
    std::cout << "\t.global\t" << var << "\n";
    std::cout << "\t.align\t" << "8\n";
    std::cout << var << ":\n";
    std::cout << "\t.long\t" << val << "\n";
    std::cout << "\t.size\t" << var << ", 8\n";
  }



}
