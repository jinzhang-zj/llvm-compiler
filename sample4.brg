%{
/*
   FILE: sample4.brg
  
   Copyright (c) 1997 Princeton University

   All rights reserved.

   This software is to be used for non-commercial purposes only,
   unless authorized permission to do otherwise is obtained.  
   For more information, contact spam@ee.princeton.edu
*/

#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unordered_set>
#include <sstream>
enum {
  LOADI=1, STOREI=2, CNSTT=3, BINOP1=4,
  BINOP2=5, STOREI2=10, GLOBI=51,
  COPYI=6, ADDRLP=7, ASGNI=8, MEM=9,
  ICMPI=111, JUMPI=112, UJUMPI=113
};

typedef struct tree {
  int op;
  int inst_num;
  struct tree *kids[2];
  int val;
  int start;
  int end;
  int num_kids;
  Instruction *inst;      
  struct { struct burm_state *state; } x;
} *NODEPTR, *Tree;

#define GET_KIDS(p)	((p)->kids)
#define PANIC printf
#define STATE_LABEL(p) ((p)->x.state)
#define SET_STATE(p,s) (p)->x.state=(s)
#define DEFAULT_COST	break
#define NO_ACTION(x)

typedef struct COST {
    int cost;
} COST;
#define COST_LESS(a,b) ((a).cost < (b).cost)

static COST COST_INFINITY = { 32767 };
static COST COST_ZERO     = { 0 };

/*static char* burm_string = "FOO";*/
static int _ern = 0;

static int shouldTrace = 0;
static int shouldCover = 0;

int OP_LABEL(NODEPTR p) {
	switch (p->op) {
	//case CNSTT:  if (p->val == 0) return 661 /* I0I */;
	default:     return p->op;
	}
}

static void burm_trace(NODEPTR, int, COST);

std::vector<Tree> rootKeys;
std::unordered_set<std::string> pools;			// active pool of registers
std::map<Instruction*, Tree> roots;
std::map<Instruction*, Tree> nodes;
std::vector<Instruction*> gvec;
std::map<Instruction*, int> SymTable;	// Instruction and offset in stack
std::map<Instruction*, int> InstIdx;	// Instruction and its number
std::map<Instruction*, std::string> RegTable;  // Instruction and register
std::map<std::string, Instruction*> InsTable;  // Register and instruction
std::map<Value*, std::string> labelTable;  // Instruction and label

int labelCount = 0;

int offCount = -8;	// Global value for offset count
static int getNexOff()
{
  offCount -= 8;
  return offCount + 8;
}

// Expire the old register that's not useful
static void expireOldInterval(Instruction *inst) {
  int T = InstIdx[inst];
  //errs() << "trying " << *inst << " at interval " << T << "\n";
  for (auto it = InsTable.begin(); it != InsTable.end(); ++it)
  {
    NODEPTR cur = nodes[it->second];
    if (cur->end <= T)
    {
      //errs() << "expire " << it->first << " at time interval " << T << "\n";
      pools.insert(it->first);
      InsTable.erase(it->first);
      RegTable.erase(it->second);
    }
  }
}

static std::string spillAtInterval(Instruction *inst)
{
  int maxEnd = -1;
  Instruction *maxIns = NULL;

  for (auto it = InsTable.begin(); it != InsTable.end(); ++it)
  {
    NODEPTR cur = nodes[it->second];
    if (cur->end > maxEnd)
    {
      maxEnd = cur->end;
      maxIns = cur->inst;
    }
  }

  std::string reg = RegTable[maxIns];
  int offset = getNexOff();
  RegTable[maxIns] = std::to_string(offset) + "(%rbp)";
  InsTable.erase(reg);
  std::cout << "\tmovq\t" << reg << ", " << RegTable[maxIns] << "\n";
  return reg;
}

void spillReg(std::string reg)
{
  if (InsTable.find(reg) == InsTable.end())
    return;
  Instruction *inst = InsTable[reg];
  int offset = getNexOff();
  RegTable[inst] = std::to_string(offset) + "(%rbp)";
  InsTable.erase(reg);
  std::cout << "\tmovq\t" << reg << ", " << RegTable[inst] << "\n";
}

// Allocate register with linear scan algorithm
static std::string getNexReg(Instruction *inst) {
  // expire old register first
  expireOldInterval(inst);

  // Get a new one with linear scan algorithm
  std::string reg;
  if (!pools.empty())
  {
    auto it = pools.begin();
    reg = *it;
    pools.erase(reg);
  }
  else
  {
    // spill
    reg = spillAtInterval(inst);
  }

  return reg;
}

std::string binop(Instruction *inst)
{
  switch (inst->getOpcode()) {
    case Instruction::Add : return "\taddq\t";
    case Instruction::Sub : return "\tsubq\t";
    case Instruction::Mul : return "\timulq\t";
    case Instruction::UDiv : return "\tdivq\t";
    case Instruction::SDiv : return "\tidivq\t";
    case Instruction::Shl : return "\tsalq\t";
    case Instruction::LShr : return "\tshrq\t";
    case Instruction::AShr : return "\tsarq\t";
    case Instruction::And : return "\tandq\t";
    case Instruction::Or :  return "\torq\t";
    case Instruction::Xor :  return "\txorq\t";
    default: return "\tunknown\t";
  }
}

%}
%term BURP=0 LOADI=1 STOREI=2 CNSTT=3
%term BINOP1=4 BINOP2=5 COPYI=6 ADDRLP=7 
%term ASGNI=8 MEM=9 STOREI2=10 RETI=11
%term ICMPI=111 JUMPI=112 UJUMPI=113
%term GLOBI=51
%declare<std::string> stmt<int indent>;
%declare<std::string> reg<int indent>;
%declare<std::string> disp<int indent>;
%declare<std::string> rc<int indent>;
%declare<std::string> con<int indent>;
%%
stmt:	BURP(_,_,_)
	{ return 1; }
	= {
		$immed[2,stmt](10);
                return "";
	};

stmt:	STOREI(disp,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		std::cout << "\tmovq\t" + $action[3](indent+1) + ", " + $action[2](indent+1) + "\n";
		return "";
	};


reg:	ICMPI(reg,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
                NODEPTR cur = _s->node;

		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = $action[2](indent+1);
                std::cout << "\tcmp\t" + reg1 +  ", " + $action[3](indent+1) + "\n";
                RegTable[cur->inst] = reg1;
                return reg1;
	};



stmt:	STOREI(reg,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		std::cout << "\tmovq\t" + $action[3](indent+1) + ", (" + $action[2](indent+1) + ")\n";
		return "";
	};

stmt:	STOREI2(disp,disp)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = getNexReg(_s->node->inst);
		RegTable[_s->node->inst] = reg1;
                InsTable[reg1] = _s->node->inst;
                std::cout << "\tleaq\t" << $action[3](indent+1) << ", " << reg1 << "\n";
		std::cout << "\tmovq\t" + reg1 + ", " + $action[2](indent+1) + "\n";
		return "";
	};



stmt:  	UJUMPI
	{ $cost[0].cost=1;}
	={
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		NODEPTR cur = _s->node;
		std::cout << "\tjmp\t" + labelTable[cur->inst->getOperand(0)] + "\n"; 
                return "";
	};

stmt: 	JUMPI(rc)
	{ $cost[0].cost=$cost[2].cost+1;}
	={
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = $action[2](indent+1);
		
                NODEPTR cur = _s->node;
		NODEPTR child = cur->kids[0];
		int opr= (dyn_cast<CmpInst>(child->inst))->getPredicate();
		
		std::string x86opr = "";

                if (opr == 32)
                        x86opr = "\tje\t";
                else if (opr == 33)
                        x86opr = "\tjne\t";
                else if (opr == 34)
                        x86opr = "\tja\t";
               	else if (opr == 35)
                        x86opr = "\tjae\t";
                else if (opr == 36)
                        x86opr = "\jb\t";
                else if (opr == 37)
                        x86opr = "\tjbe\t";
                else if (opr == 38)
                        x86opr = "\tjg\t";
                else if (opr == 39)
                        x86opr = "\tjge\t";
                else if (opr == 40)
                        x86opr = "\tjl\t";
                else if (opr == 41)
                        x86opr = "\tjle\t";

		std::cout << x86opr + labelTable[cur->inst->getOperand(1)] + "\n";
		std::cout << "\tjmp\t" + labelTable[cur->inst->getOperand(2)] + "\n"; 
                return "";

	};




stmt:	reg
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		return $action[1](indent+1);
	};

reg:	COPYI
	{ $cost[0].cost=1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = getNexReg(_s->node->inst);
                if (reg1.compare(RegTable[_s->node->inst]) != 0)
                  std::cout << "\tmovq\t" + RegTable[_s->node->inst] + ", " + reg1 + "\n";
                if (RegTable[_s->node->inst][0] != '%')
                {
                  //errs() << "copy updating " << *(_s->node->inst) << " to " << reg1 << "\n";
                  RegTable[_s->node->inst] = reg1;
                  InsTable[reg1] = _s->node->inst;
                }
                return reg1;
	};

reg:	BINOP1(reg,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = $action[2](indent+1);
                NODEPTR cur = _s->node;
                if (cur->inst->getOpcode() != Instruction::UDiv && 
                    cur->inst->getOpcode() != Instruction::SDiv)
                {
                  std::cout << binop(cur->inst) + $action[3](indent+1) + ", " + reg1 + "\n";
                  RegTable[cur->inst] = reg1;
                  InsTable[reg1] = cur->inst;
                  return reg1;
                }
                else if (reg1.compare("%rax") != 0)
                {
                  spillReg("%rdx");
                  spillReg("%rax");
                  std::cout << "\tmovq\t" << reg1 << ", %rax\n";
                  reg1 = "%rax";
                }
		std::cout << "\tcqto\n";
                std::cout << binop(cur->inst) + $action[3](indent+1) + "\n";
                RegTable[cur->inst] = reg1;
                InsTable[reg1] = cur->inst;
                return reg1;
	};

reg:	BINOP2(rc, reg)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = $action[3](indent+1);
                NODEPTR cur = _s->node;
                if (cur->inst->getOpcode() != Instruction::UDiv && 
                    cur->inst->getOpcode() != Instruction::SDiv)
                {
                  std::cout << binop(cur->inst) + $action[2](indent+1) + ", " + reg1 + "\n";
                  RegTable[cur->inst] = reg1;
                  InsTable[reg1] = cur->inst;
                  return reg1;
                }
                else if (reg1.compare("%rax") != 0)
                {
                  spillReg("%rdx");
                  spillReg("%rax");
                  std::cout << "\tmovq\t" << reg1 << ", %rax\n";
                  reg1 = "%rax";
                }
		std::cout << "\tcqto\n";
                std::cout << binop(cur->inst) + $action[2](indent+1) + "\n";
                RegTable[cur->inst] = reg1;
                InsTable[reg1] = cur->inst;
                return reg1;
	};

reg:	LOADI
	{ $cost[0].cost=1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = getNexReg(_s->node->inst);
		RegTable[_s->node->inst] = reg1;
                InsTable[reg1] = _s->node->inst;
                NODEPTR cur = _s->node;
                if (isa<GlobalValue>(cur->inst->getOperand(0)))
                {
		  Instruction *inst = (Instruction *) (cur->inst->getOperand(0));
		  std::string str;
		  llvm::raw_string_ostream rso(str);
		  inst->print(rso);
		  rso.flush();
    		  int idx = str.find_first_of(' ');
		  std::cout << "\tmovq\t" + str.substr(1, idx -1) + "(%rip), " + reg1 + "\n";
                }
		else
		{
                  Instruction *inst = dyn_cast<Instruction>(cur->inst->getOperand(0));
                  int offset = SymTable[inst];
                  std::cout << "\tmovq\t" + std::to_string(offset) + "(%rbp), " + reg1 + "\n";
		}
                return reg1;
	};

disp:	ADDRLP
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                NODEPTR cur = _s->node;
                Instruction *inst = dyn_cast<Instruction>(cur->inst->getOperand(cur->inst_num));
                Type *tp = cur->inst->getOperand(cur->inst_num)->getType();
                std::string tmpStr;
                llvm::raw_string_ostream rso(tmpStr);
                tp->print(rso);
                rso.flush();
                int level = 0;
                for (char c : tmpStr)
                  if (c == '*')
                    level++;
                int offset = 0;
                offset = SymTable[inst];
                std::string ret =  std::to_string(offset) + "(%rbp)";
                return ret;
	};

disp:	BINOP1(reg,rc)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = $action[2](indent+1);
                NODEPTR cur = _s->node;
                if (cur->inst->getOpcode() != Instruction::UDiv && 
                    cur->inst->getOpcode() != Instruction::SDiv)
                {
                  std::cout << binop(cur->inst) + $action[3](indent+1) + ", " + reg1 + "\n";
                  RegTable[cur->inst] = reg1;
                  InsTable[reg1] = cur->inst;
                  return reg1;
                }
                else if (reg1.compare("%rax") != 0)
                {
                  spillReg("%rdx");
                  spillReg("%rax");
                  std::cout << "\tmovq\t" << reg1 << ", %rax\n";
                  reg1 = "%rax";
                }
		std::cout << "\tcqto\n";
                std::cout << binop(cur->inst) + $action[3](indent+1) + "\n";
                RegTable[cur->inst] = reg1;
                InsTable[reg1] = cur->inst;
                return reg1;
	};

disp:	BINOP2(rc, reg)
	{ $cost[0].cost=$cost[2].cost+$cost[3].cost+1; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                std::string reg1 = $action[3](indent+1);
                NODEPTR cur = _s->node;
                if (cur->inst->getOpcode() != Instruction::UDiv && 
                    cur->inst->getOpcode() != Instruction::SDiv)
                {
                  std::cout << binop(cur->inst) + $action[2](indent+1) + ", " + reg1 + "\n";
                  RegTable[cur->inst] = reg1;
                  InsTable[reg1] = cur->inst;
                  return reg1;
                }
                else if (reg1.compare("%rax") != 0)
                {
                  spillReg("%rdx");
                  spillReg("%rax");
                  std::cout << "\tmovq\t" << reg1 << ", %rax\n";
                  reg1 = "%rax";
                }
		std::cout << "\tcqto\n";
                std::cout << binop(cur->inst) + $action[2](indent+1) + "\n";
                RegTable[cur->inst] = reg1;
                InsTable[reg1] = cur->inst;
                return reg1;
	};
disp:	GLOBI
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		std::string str;
		llvm::raw_string_ostream rso(str);
		_s->node->inst->print(rso);
		rso.flush();
                int idx = str.find_first_of(' ');
		std::string rip = "(%rip)";
		return str.substr(1, idx - 1) + rip;
	};

rc:	con
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		return $action[1](indent+1);
	};

rc:	reg
	{ $cost[0].cost=$cost[1].cost; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
		return $action[1](indent+1);
	};

con:	CNSTT
	{ $cost[0].cost=0; }
	= {
		int i;
		for (i = 0; i < indent; i++)
			std::cerr << " ";
		std::cerr << burm_string[_ern] << "\n";
                NODEPTR cur = _s->node;
                Constant* cnst = dyn_cast<Constant>(cur->inst->getOperand(cur->inst_num));
                int val = cnst->getUniqueInteger().getSExtValue();
                return "$" + std::to_string(val);
	};


%%

/* burm_trace - print trace message for matching p */
static void burm_trace(NODEPTR p, int eruleno, COST cost) {
	if (shouldTrace)
		std::cerr << "0x" << p << " matched " << burm_string[eruleno] << " = " << eruleno << " with cost " << cost.cost << "\n";
}

static void gen(NODEPTR p) {
	if (burm_label(p) == 0)
		std::cerr << "no cover\n";
	else {
		stmt_action(p->x.state,0);
		if (shouldCover != 0)
			dumpCover(p, 1, 0);
	}
}

static void updateLifeInterval(NODEPTR p) {
  p->start = InstIdx[p->inst];
  p->end = 0;

  for (int i = 0; i < p->inst->getNumOperands(); ++i)
  {
    if (isa<Constant>(p->inst->getOperand(i)))
      continue;

    if (!isa<Instruction>(p->inst->getOperand(i)))
      continue;

    Instruction* opinst = dyn_cast<Instruction>(p->inst->getOperand(i));
    if (nodes.find(opinst) != nodes.end())
      nodes[opinst]->end = p->start;
    if (roots.find(opinst) != roots.end())
      roots[opinst]->end = p->start;
  }
}

// Generate the layout for all global data
static void GlobalLayOut()
{
  bool flag = true;
  std::vector<Instruction*> cvec;

  std::cout << "\n";
  for (auto inst : gvec)
  {
    std::string str;
    llvm::raw_string_ostream rso(str);
    inst->print(rso);
    rso.flush();

    std::stringstream ss(str);
    std::string var;
    std::string tmp;
    std::string ope;
    ss >> var >> tmp >> ope;
    if (ope.compare("common") == 0)
    {
      cvec.push_back(inst);
      continue;
    }

    var.erase(var.begin());
    Constant* cnst = dyn_cast<Constant>(inst->getOperand(0));
    int val = cnst->getUniqueInteger().getSExtValue();
    std::cout << "\t.type\t" << var << ",@object\n";
    if (flag)
    {
      std::cout << "\t.data\n";
      flag = false;
    }
    std::cout << "\t.globl\t" << var << "\n";
    std::cout << "\t.align\t" << "8\n";
    std::cout << var << ":\n";
    std::cout << "\t.quad\t" << val << "\n";
    std::cout << "\t.size\t" << var << ", 8\n\n";
  }

  for (auto inst : cvec)
  {
    std::string str;
    llvm::raw_string_ostream rso(str);
    inst->print(rso);
    rso.flush();
    
    std::stringstream ss(str);
    std::string var;
    ss >> var;
    var.erase(var.begin());
    std::cout << "\t.type\t" << var << ",@object\n";
    std::cout << "\t.comm\t" << var << ",8,8\n";
  }

}

/* Generate the header for the assembly code */
void headerGen(char *filename)
{ 
  std::cout << "\t.text\n";
  std::cout << "\t.file\t" << "\"" << filename << "\"\n";
  std::cout << "\t.global\tmain\n";
  std::cout << "\t.align\t16, 0x90\n";
  std::cout << "\t.type\tmain,@function\n";
  std::cout << "main:\n";
  std::cout << "\tpushq\t%rbp\n";
  std::cout << "\tmovq\t%rsp, %rbp\n";
}

/* Generate the tail for the assembly code */
void tailGen()
{
  //std::cout << "\txorl\t%eax, %eax\n";
  std::cout << "\tmovq\t-8(%rbp), %rax\n";
  std::cout << "\tpopq\t%rbp\n";
  std::cout << "\tretq\n";
}
